// We have a structure that we ask all of our students to follow when presenting on a whiteboarding problem and it goes as follows:
// 1. Clarify the problem & test I / O and edge cases
// 2. Formulate your approach(es)
// 3. Pseudocode best approach
// 4. Code it
// 5. Walk through an example input
// 6. Determine the Big O time and space complexity

//Kadane's Algorithm//

//neg numbers are allowed, no empty arrays, only integers present//

// PSEUDOCODE
//given an array, out of all the subsections of the array, when summing each's elements together
//what is the maximum sum of any of those subsections

// BRUTE FORCE SOLUTION//
//first method finds all of the possible subsections of the array:
// iterate through input array selecting a starting index starting with 0
// within that iterative loop, begin another iteration, incrementing 1 from the previous index
//not altering the input array: choose slice method to create arrays that are portions of the input array at the two indexes generated by the outer and inner for loops
//pass that sub array to a function that iterates through the array, summing each element together
//keep a maximumVal variable that is reset continually if another maximum sum is larger
//return that maximumVal
let arr = [1, 1, 1, 1, -9];

const subsections = function(array) {
  let maxVal = 0;
  for (let i = 0; i < array.length; i++) {
    for (let j = i + 1; j < array.length; j++) {
      let sum = summer(array.slice(i, j + 1));
      console.log("SUM: ", sum);
      if (sum > maxVal) maxVal = sum;
    }
  }
  return maxVal;
};

const summer = function(subArr) {
  let sum = subArr.shift();
  for (let i = 0; i < subArr.length; i++) {
    sum += subArr[i];
  }
  return sum;
};

console.log(subsections(arr));
